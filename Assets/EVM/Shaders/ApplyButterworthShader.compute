#pragma kernel ApplyButterworth

// Input and output textures
Texture2D<float4> InputTexture;
RWTexture2D<float4> PrevTexture;
RWTexture2D<float4> LowPass1Texture;
RWTexture2D<float4> LowPass2Texture;

// Filter coefficients
float2 LowA;
float2 LowB;
float2 HighA;
float2 HighB;

[numthreads(8, 8, 1)]
void ApplyButterworth (uint3 id : SV_DispatchThreadID)
{
    // Get current pixel coordinates
    float4 tempColor = InputTexture[id.xy];
    float4 lowpassColor = LowPass1Texture[id.xy];
    float4 prevColor = PrevTexture[id.xy];

    // Apply Butterworth filter
    float lowPassR = -LowB.y * lowpassColor.r + LowA.x * tempColor.r + LowA.y * prevColor.r;
    float lowPassG = -LowB.y * lowpassColor.g + LowA.x * tempColor.g + LowA.y * prevColor.g;
    float lowPassB = -LowB.y * lowpassColor.b + LowA.x * tempColor.b + LowA.y * prevColor.b;
    LowPass1Texture[id.xy] = float4(lowPassR / LowB.x, lowPassG / LowB.x, lowPassB / LowB.x, 1.0);

    // Also for the second low pass
    float4 lowpassColor2 = LowPass2Texture[id.xy];
    float lowPassR2 = -HighB.y * lowpassColor2.r + HighA.x * tempColor.r + HighA.y * prevColor.r;
    float lowPassG2 = -HighB.y * lowpassColor2.g + HighA.x * tempColor.g + HighA.y * prevColor.g;
    float lowPassB2 = -HighB.y * lowpassColor2.b + HighA.x * tempColor.b + HighA.y * prevColor.b;
    LowPass2Texture[id.xy] = float4(lowPassR2 / HighB.x, lowPassG2 / HighB.x, lowPassB2 / HighB.x, 1.0);

    // Update the previous texture
    PrevTexture[id.xy] = tempColor;
}